<?php

/**
 * ApplicationOperationsApi
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use SkipPay\ApiException;
use SkipPay\Configuration;
use SkipPay\HeaderSelector;
use SkipPay\ObjectSerializer;

/**
 * ApplicationOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for cancelapplication.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function cancelapplicationHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Cancel application
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationCancelRequest|null $applicationCancelRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\ApplicationResponse
     */
    public function cancelapplication($applicationId, $applicationCancelRequest = null)
    {
        return $this->cancelapplicationWithHttpInfo($applicationId, $applicationCancelRequest)[0];
    }

    /**
     * Cancel application
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationCancelRequest|null $applicationCancelRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\ApplicationResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function cancelapplicationWithHttpInfo($applicationId, $applicationCancelRequest = null)
    {
        $request = $this->cancelapplicationRequest($applicationId, $applicationCancelRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->cancelapplicationHandleException($e);
        }
    }

    /**
     * Cancel application
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationCancelRequest|null $applicationCancelRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelapplicationAsync($applicationId, $applicationCancelRequest = null)
    {
        return $this->cancelapplicationAsyncWithHttpInfo($applicationId, $applicationCancelRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\ApplicationResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\ApplicationResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Cancel application
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationCancelRequest|null $applicationCancelRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelapplicationAsyncWithHttpInfo($applicationId, $applicationCancelRequest = null)
    {
        $request = $this->cancelapplicationRequest($applicationId, $applicationCancelRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'cancelapplicationHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'cancelapplication'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationCancelRequest|null $applicationCancelRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelapplicationRequest($applicationId, $applicationCancelRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/cancel';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $applicationCancelRequest
        );
    }

    /**
     * Exception handler for changeapplicationorder.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function changeapplicationorderHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Change application order
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationOrderChangeRequest|null $applicationOrderChangeRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function changeapplicationorder($applicationId, $applicationOrderChangeRequest = null)
    {
        return $this->changeapplicationorderWithHttpInfo($applicationId, $applicationOrderChangeRequest)[0];
    }

    /**
     * Change application order
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationOrderChangeRequest|null $applicationOrderChangeRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function changeapplicationorderWithHttpInfo($applicationId, $applicationOrderChangeRequest = null)
    {
        $request = $this->changeapplicationorderRequest($applicationId, $applicationOrderChangeRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->changeapplicationorderHandleException($e);
        }
    }

    /**
     * Change application order
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationOrderChangeRequest|null $applicationOrderChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeapplicationorderAsync($applicationId, $applicationOrderChangeRequest = null)
    {
        return $this->changeapplicationorderAsyncWithHttpInfo($applicationId, $applicationOrderChangeRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Change application order
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationOrderChangeRequest|null $applicationOrderChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeapplicationorderAsyncWithHttpInfo($applicationId, $applicationOrderChangeRequest = null)
    {
        $request = $this->changeapplicationorderRequest($applicationId, $applicationOrderChangeRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'changeapplicationorderHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'changeapplicationorder'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\ApplicationOrderChangeRequest|null $applicationOrderChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeapplicationorderRequest($applicationId, $applicationOrderChangeRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/order';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $applicationOrderChangeRequest
        );
    }

    /**
     * Exception handler for createapplication.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function createapplicationHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 400:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create application
     *
     * @param \SkipPay\Model\ApplicationRequest|null $applicationRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\ApplicationResponse|\SkipPay\Model\ApplicationResponse
     */
    public function createapplication($applicationRequest = null)
    {
        return $this->createapplicationWithHttpInfo($applicationRequest)[0];
    }

    /**
     * Create application
     *
     * @param \SkipPay\Model\ApplicationRequest|null $applicationRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\ApplicationResponse|\SkipPay\Model\ApplicationResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createapplicationWithHttpInfo($applicationRequest = null)
    {
        $request = $this->createapplicationRequest($applicationRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                case 201:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->createapplicationHandleException($e);
        }
    }

    /**
     * Create application
     *
     * @param \SkipPay\Model\ApplicationRequest|null $applicationRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createapplicationAsync($applicationRequest = null)
    {
        return $this->createapplicationAsyncWithHttpInfo($applicationRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\ApplicationResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\ApplicationResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create application
     *
     * @param \SkipPay\Model\ApplicationRequest|null $applicationRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createapplicationAsyncWithHttpInfo($applicationRequest = null)
    {
        $request = $this->createapplicationRequest($applicationRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'createapplicationHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 201) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'createapplication'
     *
     * @param \SkipPay\Model\ApplicationRequest|null $applicationRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createapplicationRequest($applicationRequest = null)
    {

        $resourcePath = '/financing/v1/applications';

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $applicationRequest
        );
    }

    /**
     * Exception handler for createapplicationfromrecurrence.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function createapplicationfromrecurrenceHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 400:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Create application from recurrence
     *
     * @param string $recurrenceId
     *   Recurrence ID from first application
     * @param \SkipPay\Model\ApplicationWithoutCustomerRequest|null $applicationWithoutCustomerRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\ApplicationResponse
     */
    public function createapplicationfromrecurrence($recurrenceId, $applicationWithoutCustomerRequest = null)
    {
        return $this->createapplicationfromrecurrenceWithHttpInfo($recurrenceId, $applicationWithoutCustomerRequest)[0];
    }

    /**
     * Create application from recurrence
     *
     * @param string $recurrenceId
     *   Recurrence ID from first application
     * @param \SkipPay\Model\ApplicationWithoutCustomerRequest|null $applicationWithoutCustomerRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\ApplicationResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function createapplicationfromrecurrenceWithHttpInfo($recurrenceId, $applicationWithoutCustomerRequest = null)
    {
        $request = $this->createapplicationfromrecurrenceRequest($recurrenceId, $applicationWithoutCustomerRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 201:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->createapplicationfromrecurrenceHandleException($e);
        }
    }

    /**
     * Create application from recurrence
     *
     * @param string $recurrenceId
     *   Recurrence ID from first application
     * @param \SkipPay\Model\ApplicationWithoutCustomerRequest|null $applicationWithoutCustomerRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createapplicationfromrecurrenceAsync($recurrenceId, $applicationWithoutCustomerRequest = null)
    {
        return $this->createapplicationfromrecurrenceAsyncWithHttpInfo($recurrenceId, $applicationWithoutCustomerRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\ApplicationResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\ApplicationResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Create application from recurrence
     *
     * @param string $recurrenceId
     *   Recurrence ID from first application
     * @param \SkipPay\Model\ApplicationWithoutCustomerRequest|null $applicationWithoutCustomerRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createapplicationfromrecurrenceAsyncWithHttpInfo($recurrenceId, $applicationWithoutCustomerRequest = null)
    {
        $request = $this->createapplicationfromrecurrenceRequest($recurrenceId, $applicationWithoutCustomerRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'createapplicationfromrecurrenceHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 201) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'createapplicationfromrecurrence'
     *
     * @param string $recurrenceId
     *   Recurrence ID from first application
     * @param \SkipPay\Model\ApplicationWithoutCustomerRequest|null $applicationWithoutCustomerRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createapplicationfromrecurrenceRequest($recurrenceId, $applicationWithoutCustomerRequest = null)
    {

        $resourcePath = '/financing/v1/recurrences/{recurrenceId}/applications';
        $resourcePath = str_replace(
            '{' . 'recurrenceId' . '}',
            ObjectSerializer::toPathValue($recurrenceId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $applicationWithoutCustomerRequest
        );
    }

    /**
     * Exception handler for getapplicationdetail.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function getapplicationdetailHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get application detail
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\ApplicationResponse
     */
    public function getapplicationdetail($applicationId)
    {
        return $this->getapplicationdetailWithHttpInfo($applicationId)[0];
    }

    /**
     * Get application detail
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\ApplicationResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getapplicationdetailWithHttpInfo($applicationId)
    {
        $request = $this->getapplicationdetailRequest($applicationId);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\ApplicationResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->getapplicationdetailHandleException($e);
        }
    }

    /**
     * Get application detail
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getapplicationdetailAsync($applicationId)
    {
        return $this->getapplicationdetailAsyncWithHttpInfo($applicationId)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\ApplicationResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\ApplicationResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get application detail
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getapplicationdetailAsyncWithHttpInfo($applicationId)
    {
        $request = $this->getapplicationdetailRequest($applicationId);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'getapplicationdetailHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\ApplicationResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'getapplicationdetail'
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getapplicationdetailRequest($applicationId)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            []
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getorder.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function getorderHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get order
     *
     * @param string|null $orderNumber
     *   Order Number
     * @param string|null $orderVariableSymbol
     *   Order Variable Symbol
     * @param string|null $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function getorder($orderNumber = null, $orderVariableSymbol = null, $applicationId = null)
    {
        return $this->getorderWithHttpInfo($orderNumber, $orderVariableSymbol, $applicationId)[0];
    }

    /**
     * Get order
     *
     * @param string|null $orderNumber
     *   Order Number
     * @param string|null $orderVariableSymbol
     *   Order Variable Symbol
     * @param string|null $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getorderWithHttpInfo($orderNumber = null, $orderVariableSymbol = null, $applicationId = null)
    {
        $request = $this->getorderRequest($orderNumber, $orderVariableSymbol, $applicationId);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->getorderHandleException($e);
        }
    }

    /**
     * Get order
     *
     * @param string|null $orderNumber
     *   Order Number
     * @param string|null $orderVariableSymbol
     *   Order Variable Symbol
     * @param string|null $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getorderAsync($orderNumber = null, $orderVariableSymbol = null, $applicationId = null)
    {
        return $this->getorderAsyncWithHttpInfo($orderNumber, $orderVariableSymbol, $applicationId)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get order
     *
     * @param string|null $orderNumber
     *   Order Number
     * @param string|null $orderVariableSymbol
     *   Order Variable Symbol
     * @param string|null $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getorderAsyncWithHttpInfo($orderNumber = null, $orderVariableSymbol = null, $applicationId = null)
    {
        $request = $this->getorderRequest($orderNumber, $orderVariableSymbol, $applicationId);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'getorderHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'getorder'
     *
     * @param string|null $orderNumber
     *   Order Number
     * @param string|null $orderVariableSymbol
     *   Order Variable Symbol
     * @param string|null $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getorderRequest($orderNumber = null, $orderVariableSymbol = null, $applicationId = null)
    {

        $resourcePath = '/financing/v1/orders';

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            []
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
                'orderNumber' => isset($orderNumber) ? ObjectSerializer::toQueryValue($orderNumber) : null,
                'orderVariableSymbol' => isset($orderVariableSymbol) ? ObjectSerializer::toQueryValue($orderVariableSymbol) : null,
                'applicationId' => isset($applicationId) ? ObjectSerializer::toQueryValue($applicationId) : null,
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getpaymentsonspecificapplication.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function getpaymentsonspecificapplicationHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get payments on specific application
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\Getpaymentsonspecificapplicationresponse
     */
    public function getpaymentsonspecificapplication($applicationId)
    {
        return $this->getpaymentsonspecificapplicationWithHttpInfo($applicationId)[0];
    }

    /**
     * Get payments on specific application
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\Getpaymentsonspecificapplicationresponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getpaymentsonspecificapplicationWithHttpInfo($applicationId)
    {
        $request = $this->getpaymentsonspecificapplicationRequest($applicationId);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\Getpaymentsonspecificapplicationresponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\Getpaymentsonspecificapplicationresponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->getpaymentsonspecificapplicationHandleException($e);
        }
    }

    /**
     * Get payments on specific application
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getpaymentsonspecificapplicationAsync($applicationId)
    {
        return $this->getpaymentsonspecificapplicationAsyncWithHttpInfo($applicationId)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\Getpaymentsonspecificapplicationresponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\Getpaymentsonspecificapplicationresponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get payments on specific application
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getpaymentsonspecificapplicationAsyncWithHttpInfo($applicationId)
    {
        $request = $this->getpaymentsonspecificapplicationRequest($applicationId);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'getpaymentsonspecificapplicationHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\Getpaymentsonspecificapplicationresponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\Getpaymentsonspecificapplicationresponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'getpaymentsonspecificapplication'
     *
     * @param string $applicationId
     *   applicationId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getpaymentsonspecificapplicationRequest($applicationId)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/payments';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            []
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for getrecurrence.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function getrecurrenceHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Get recurrence
     *
     * @param string $recurrenceId
     *   recurrenceId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\RecurrenceObject
     */
    public function getrecurrence($recurrenceId)
    {
        return $this->getrecurrenceWithHttpInfo($recurrenceId)[0];
    }

    /**
     * Get recurrence
     *
     * @param string $recurrenceId
     *   recurrenceId
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\RecurrenceObject,
     *     int,
     *     array<array<string>>
     * }
     */
    public function getrecurrenceWithHttpInfo($recurrenceId)
    {
        $request = $this->getrecurrenceRequest($recurrenceId);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\RecurrenceObject::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->getrecurrenceHandleException($e);
        }
    }

    /**
     * Get recurrence
     *
     * @param string $recurrenceId
     *   recurrenceId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getrecurrenceAsync($recurrenceId)
    {
        return $this->getrecurrenceAsyncWithHttpInfo($recurrenceId)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\RecurrenceObject,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\RecurrenceObject
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Get recurrence
     *
     * @param string $recurrenceId
     *   recurrenceId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getrecurrenceAsyncWithHttpInfo($recurrenceId)
    {
        $request = $this->getrecurrenceRequest($recurrenceId);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'getrecurrenceHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'getrecurrence'
     *
     * @param string $recurrenceId
     *   recurrenceId
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getrecurrenceRequest($recurrenceId)
    {

        $resourcePath = '/financing/v1/recurrences/{recurrenceId}';
        $resourcePath = str_replace(
            '{' . 'recurrenceId' . '}',
            ObjectSerializer::toPathValue($recurrenceId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            []
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'GET',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            ''
        );
    }

    /**
     * Exception handler for markorderitemsascancelled.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function markorderitemsascancelledHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Mark order items as cancelled
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsChangeRequest|null $orderItemsChangeRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function markorderitemsascancelled($applicationId, $orderItemsChangeRequest = null)
    {
        return $this->markorderitemsascancelledWithHttpInfo($applicationId, $orderItemsChangeRequest)[0];
    }

    /**
     * Mark order items as cancelled
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsChangeRequest|null $orderItemsChangeRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function markorderitemsascancelledWithHttpInfo($applicationId, $orderItemsChangeRequest = null)
    {
        $request = $this->markorderitemsascancelledRequest($applicationId, $orderItemsChangeRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->markorderitemsascancelledHandleException($e);
        }
    }

    /**
     * Mark order items as cancelled
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsChangeRequest|null $orderItemsChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsascancelledAsync($applicationId, $orderItemsChangeRequest = null)
    {
        return $this->markorderitemsascancelledAsyncWithHttpInfo($applicationId, $orderItemsChangeRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Mark order items as cancelled
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsChangeRequest|null $orderItemsChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsascancelledAsyncWithHttpInfo($applicationId, $orderItemsChangeRequest = null)
    {
        $request = $this->markorderitemsascancelledRequest($applicationId, $orderItemsChangeRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'markorderitemsascancelledHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'markorderitemsascancelled'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsChangeRequest|null $orderItemsChangeRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markorderitemsascancelledRequest($applicationId, $orderItemsChangeRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/order/cancel';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $orderItemsChangeRequest
        );
    }

    /**
     * Exception handler for markorderitemsasdelivered.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function markorderitemsasdeliveredHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Mark order items as delivered
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsDeliverRequest|null $orderItemsDeliverRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function markorderitemsasdelivered($applicationId, $orderItemsDeliverRequest = null)
    {
        return $this->markorderitemsasdeliveredWithHttpInfo($applicationId, $orderItemsDeliverRequest)[0];
    }

    /**
     * Mark order items as delivered
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsDeliverRequest|null $orderItemsDeliverRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function markorderitemsasdeliveredWithHttpInfo($applicationId, $orderItemsDeliverRequest = null)
    {
        $request = $this->markorderitemsasdeliveredRequest($applicationId, $orderItemsDeliverRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->markorderitemsasdeliveredHandleException($e);
        }
    }

    /**
     * Mark order items as delivered
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsDeliverRequest|null $orderItemsDeliverRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsasdeliveredAsync($applicationId, $orderItemsDeliverRequest = null)
    {
        return $this->markorderitemsasdeliveredAsyncWithHttpInfo($applicationId, $orderItemsDeliverRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Mark order items as delivered
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsDeliverRequest|null $orderItemsDeliverRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsasdeliveredAsyncWithHttpInfo($applicationId, $orderItemsDeliverRequest = null)
    {
        $request = $this->markorderitemsasdeliveredRequest($applicationId, $orderItemsDeliverRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'markorderitemsasdeliveredHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'markorderitemsasdelivered'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsDeliverRequest|null $orderItemsDeliverRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markorderitemsasdeliveredRequest($applicationId, $orderItemsDeliverRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/order/deliver';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $orderItemsDeliverRequest
        );
    }

    /**
     * Exception handler for markorderitemsasreturned.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function markorderitemsasreturnedHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Mark order items as returned
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsReturnRequest|null $orderItemsReturnRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function markorderitemsasreturned($applicationId, $orderItemsReturnRequest = null)
    {
        return $this->markorderitemsasreturnedWithHttpInfo($applicationId, $orderItemsReturnRequest)[0];
    }

    /**
     * Mark order items as returned
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsReturnRequest|null $orderItemsReturnRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function markorderitemsasreturnedWithHttpInfo($applicationId, $orderItemsReturnRequest = null)
    {
        $request = $this->markorderitemsasreturnedRequest($applicationId, $orderItemsReturnRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->markorderitemsasreturnedHandleException($e);
        }
    }

    /**
     * Mark order items as returned
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsReturnRequest|null $orderItemsReturnRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsasreturnedAsync($applicationId, $orderItemsReturnRequest = null)
    {
        return $this->markorderitemsasreturnedAsyncWithHttpInfo($applicationId, $orderItemsReturnRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Mark order items as returned
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsReturnRequest|null $orderItemsReturnRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsasreturnedAsyncWithHttpInfo($applicationId, $orderItemsReturnRequest = null)
    {
        $request = $this->markorderitemsasreturnedRequest($applicationId, $orderItemsReturnRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'markorderitemsasreturnedHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'markorderitemsasreturned'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsReturnRequest|null $orderItemsReturnRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markorderitemsasreturnedRequest($applicationId, $orderItemsReturnRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/order/return';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $orderItemsReturnRequest
        );
    }

    /**
     * Exception handler for markorderitemsassent.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function markorderitemsassentHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Mark order items as sent
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsSendRequest|null $orderItemsSendRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\OrderExtendedResponse
     */
    public function markorderitemsassent($applicationId, $orderItemsSendRequest = null)
    {
        return $this->markorderitemsassentWithHttpInfo($applicationId, $orderItemsSendRequest)[0];
    }

    /**
     * Mark order items as sent
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsSendRequest|null $orderItemsSendRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\OrderExtendedResponse,
     *     int,
     *     array<array<string>>
     * }
     */
    public function markorderitemsassentWithHttpInfo($applicationId, $orderItemsSendRequest = null)
    {
        $request = $this->markorderitemsassentRequest($applicationId, $orderItemsSendRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->markorderitemsassentHandleException($e);
        }
    }

    /**
     * Mark order items as sent
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsSendRequest|null $orderItemsSendRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsassentAsync($applicationId, $orderItemsSendRequest = null)
    {
        return $this->markorderitemsassentAsyncWithHttpInfo($applicationId, $orderItemsSendRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\OrderExtendedResponse,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\OrderExtendedResponse
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Mark order items as sent
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsSendRequest|null $orderItemsSendRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markorderitemsassentAsyncWithHttpInfo($applicationId, $orderItemsSendRequest = null)
    {
        $request = $this->markorderitemsassentRequest($applicationId, $orderItemsSendRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'markorderitemsassentHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\OrderExtendedResponse::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'markorderitemsassent'
     *
     * @param string $applicationId
     *   applicationId
     * @param \SkipPay\Model\OrderItemsSendRequest|null $orderItemsSendRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markorderitemsassentRequest($applicationId, $orderItemsSendRequest = null)
    {

        $resourcePath = '/financing/v1/applications/{applicationId}/order/send';
        $resourcePath = str_replace(
            '{' . 'applicationId' . '}',
            ObjectSerializer::toPathValue($applicationId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PUT',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $orderItemsSendRequest
        );
    }

    /**
     * Exception handler for updaterecurrence.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function updaterecurrenceHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 404:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
            case 422:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Update recurrence
     *
     * @param string $recurrenceId
     *   recurenceId
     * @param \SkipPay\Model\RecurrenceUpdateRequest|null $recurrenceUpdateRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\RecurrenceObject
     */
    public function updaterecurrence($recurrenceId, $recurrenceUpdateRequest = null)
    {
        return $this->updaterecurrenceWithHttpInfo($recurrenceId, $recurrenceUpdateRequest)[0];
    }

    /**
     * Update recurrence
     *
     * @param string $recurrenceId
     *   recurenceId
     * @param \SkipPay\Model\RecurrenceUpdateRequest|null $recurrenceUpdateRequest
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\RecurrenceObject,
     *     int,
     *     array<array<string>>
     * }
     */
    public function updaterecurrenceWithHttpInfo($recurrenceId, $recurrenceUpdateRequest = null)
    {
        $request = $this->updaterecurrenceRequest($recurrenceId, $recurrenceUpdateRequest);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\RecurrenceObject::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->updaterecurrenceHandleException($e);
        }
    }

    /**
     * Update recurrence
     *
     * @param string $recurrenceId
     *   recurenceId
     * @param \SkipPay\Model\RecurrenceUpdateRequest|null $recurrenceUpdateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updaterecurrenceAsync($recurrenceId, $recurrenceUpdateRequest = null)
    {
        return $this->updaterecurrenceAsyncWithHttpInfo($recurrenceId, $recurrenceUpdateRequest)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\RecurrenceObject,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\RecurrenceObject
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Update recurrence
     *
     * @param string $recurrenceId
     *   recurenceId
     * @param \SkipPay\Model\RecurrenceUpdateRequest|null $recurrenceUpdateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updaterecurrenceAsyncWithHttpInfo($recurrenceId, $recurrenceUpdateRequest = null)
    {
        $request = $this->updaterecurrenceRequest($recurrenceId, $recurrenceUpdateRequest);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'updaterecurrenceHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\RecurrenceObject::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'updaterecurrence'
     *
     * @param string $recurrenceId
     *   recurenceId
     * @param \SkipPay\Model\RecurrenceUpdateRequest|null $recurrenceUpdateRequest
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updaterecurrenceRequest($recurrenceId, $recurrenceUpdateRequest = null)
    {

        $resourcePath = '/financing/v1/recurrences/{recurrenceId}';
        $resourcePath = str_replace(
            '{' . 'recurrenceId' . '}',
            ObjectSerializer::toPathValue($recurrenceId),
            $resourcePath
        );

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'PATCH',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $recurrenceUpdateRequest
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request): ResponseInterface
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    protected function makeAsyncRequest(Request $request, callable $exceptionHandler): PromiseInterface
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                null,
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string|null $returnType The primary return type.
     * @phpstan-param class-string<T>|null $returnType
     *
     * @todo psalm return doesn't work.
     * @return array structured array or response and http info.
     * @phpstan-return array{($returnType is null ? null : T), int, array<array<string>>}
     */
    protected function responseToReturn(ResponseInterface $response, ?string $returnType): array
    {
        if (isset($returnType)) {
            $return = ObjectSerializer::deserialize(
                $response->getBody(),
                $returnType,
                $response->getHeaders()
            );
        }
        return [
            $return ?? null,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
