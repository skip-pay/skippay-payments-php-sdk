<?php

/**
 * SecurityApi
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use SkipPay\ApiException;
use SkipPay\Configuration;
use SkipPay\HeaderSelector;
use SkipPay\ObjectSerializer;

/**
 * SecurityApi Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecurityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the spec.
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Exception handler for loginpartner.
     *
     * @param \SkipPay\ApiException $e Unprocessed exception.
     *
     * @return \SkipPay\ApiException Processed exception.
     */
    protected function loginpartnerHandleException(ApiException $e): ApiException
    {
        switch ($e->getCode()) {
            case 400:
                $e->setResponseObject(
                    ObjectSerializer::deserialize(
                        $e->getResponseBody() ?? '',
                        \SkipPay\Model\ErrorsResponse::class,
                        $e->getResponseHeaders()
                    )
                );
                break;
        }
        return $e;
    }

    /**
     * Login partner
     *
     * @param \SkipPay\Model\PartnerLogin $partnerLogin
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkipPay\Model\PartnerLoginResult
     */
    public function loginpartner($partnerLogin)
    {
        return $this->loginpartnerWithHttpInfo($partnerLogin)[0];
    }

    /**
     * Login partner
     *
     * @param \SkipPay\Model\PartnerLogin $partnerLogin
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of the response, status code, and headers.
     * @phpstan-return array{
     *     \SkipPay\Model\PartnerLoginResult,
     *     int,
     *     array<array<string>>
     * }
     */
    public function loginpartnerWithHttpInfo($partnerLogin)
    {
        $request = $this->loginpartnerRequest($partnerLogin);
        try {
            $response = $this->makeRequest($request);
            switch ($response->getStatusCode()) {
                case 200:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\PartnerLoginResult::class
                    );
                default:
                    return $this->responseToReturn(
                        $response,
                        \SkipPay\Model\PartnerLoginResult::class
                    );
            }
        } catch (ApiException $e) {
            throw $this->loginpartnerHandleException($e);
        }
    }

    /**
     * Login partner
     *
     * @param \SkipPay\Model\PartnerLogin $partnerLogin
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginpartnerAsync($partnerLogin)
    {
        return $this->loginpartnerAsyncWithHttpInfo($partnerLogin)
            ->then(
                /**
                 * @phpstan-param array{
                 *     \SkipPay\Model\PartnerLoginResult,
                 *     int,
                 *     array<array<string>>
                 * } $response
                 * @return \SkipPay\Model\PartnerLoginResult
                 */
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Login partner
     *
     * @param \SkipPay\Model\PartnerLogin $partnerLogin
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginpartnerAsyncWithHttpInfo($partnerLogin)
    {
        $request = $this->loginpartnerRequest($partnerLogin);
        return $this->makeAsyncRequest(
            $request,
            [$this, 'loginpartnerHandleException']
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface && $r->getStatusCode() == 200) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\PartnerLoginResult::class
                    );
                }
                return $r;
            }
        )->then(
            function ($r) {
                if ($r instanceof ResponseInterface) {
                    $r = $this->responseToReturn(
                        $r,
                        \SkipPay\Model\PartnerLoginResult::class
                    );
                }
                return $r;
            }
        );
    }

    /**
     * Create request for operation 'loginpartner'
     *
     * @param \SkipPay\Model\PartnerLogin $partnerLogin
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginpartnerRequest($partnerLogin)
    {

        $resourcePath = '/authentication/v1/partner';

        $headers = [];
        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        if ($this->config->getUserAgent()) {
            $headers['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($headers, $this->headerSelector->selectHeaders(
            ['application/json; charset=utf-8'],
            ['application/json; charset=utf-8']
        ));
        $operationHost = $this->config->getHost();

        // figure out header select logic.
        return ObjectSerializer::createRequest(
            'POST',
            $operationHost . $resourcePath,
            // Query.
            [
            ],
            // Headers.
            array_merge(
                [
                ],
                $headers
            ),
            // Form Params
            [
            ],
            $partnerLogin
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array<string, mixed> of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Make a request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function makeRequest(Request $request): ResponseInterface
    {
        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? (string) $response->getBody() : null
            );
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }
        return $response;
    }

    /**
     * Make an async request.
     *
     * @param \GuzzleHttp\Psr7\Request $request An initialized request object.
     * @param callable $exceptionHandler A callback to process HTTP errors.
     *
     * @throws \SkipPay\ApiException on non-2xx response
     * @return \GuzzleHttp\Promise\PromiseInterface A promise that will return a processed response.
     */
    protected function makeAsyncRequest(Request $request, callable $exceptionHandler): PromiseInterface
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                null,
                function (RequestException $exception) use ($exceptionHandler) {
                    $response = $exception->getResponse();
                    $e = new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $response ? $response->getStatusCode() : 0,
                            (string) $exception->getRequest()->getUri()
                        ),
                        (int) $exception->getCode(),
                        $response ? $response->getHeaders() : [],
                        $response ? (string) $response->getBody() : null
                    );
                    throw $exceptionHandler($e);
                }
            );
    }

    /**
     * Convert a response to a return standard return array.
     *
     * @template T
     * @param \Psr\Http\Message\ResponseInterface $response A response from a request with a serialized body.
     * @param string|null $returnType The primary return type.
     * @phpstan-param class-string<T>|null $returnType
     *
     * @todo psalm return doesn't work.
     * @return array structured array or response and http info.
     * @phpstan-return array{($returnType is null ? null : T), int, array<array<string>>}
     */
    protected function responseToReturn(ResponseInterface $response, ?string $returnType): array
    {
        if (isset($returnType)) {
            $return = ObjectSerializer::deserialize(
                $response->getBody(),
                $returnType,
                $response->getHeaders()
            );
        }
        return [
            $return ?? null,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
