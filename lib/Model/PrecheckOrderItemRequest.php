<?php

/**
 * PrecheckOrderItemRequest
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * PrecheckOrderItemRequest Class Doc Comment
 *
 * @category Class
 * @description Order item information for precheck validation
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class PrecheckOrderItemRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrecheckOrderItemRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'ean' => 'string',
        'name' => 'string',
        'type' => '\SkipPay\Model\ItemType',
        'variant' => 'string',
        'description' => 'string',
        'producer' => 'string',
        'categories' => 'string[]',
        'totalPrice' => '\SkipPay\Model\Amount',
        'totalVat' => '\SkipPay\Model\VatAmount',
        'productUrl' => 'string',
        'unitPrice' => '\SkipPay\Model\Amount',
        'unitVat' => '\SkipPay\Model\VatAmount',
        'quantity' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'ean' => null,
        'name' => null,
        'type' => null,
        'variant' => null,
        'description' => null,
        'producer' => null,
        'categories' => null,
        'totalPrice' => null,
        'totalVat' => null,
        'productUrl' => 'url',
        'unitPrice' => null,
        'unitVat' => null,
        'quantity' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'ean' => 'ean',
        'name' => 'name',
        'type' => 'type',
        'variant' => 'variant',
        'description' => 'description',
        'producer' => 'producer',
        'categories' => 'categories',
        'totalPrice' => 'totalPrice',
        'totalVat' => 'totalVat',
        'productUrl' => 'productUrl',
        'unitPrice' => 'unitPrice',
        'unitVat' => 'unitVat',
        'quantity' => 'quantity',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'ean' => 'setEan',
        'name' => 'setName',
        'type' => 'setType',
        'variant' => 'setVariant',
        'description' => 'setDescription',
        'producer' => 'setProducer',
        'categories' => 'setCategories',
        'totalPrice' => 'setTotalPrice',
        'totalVat' => 'setTotalVat',
        'productUrl' => 'setProductUrl',
        'unitPrice' => 'setUnitPrice',
        'unitVat' => 'setUnitVat',
        'quantity' => 'setQuantity',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'ean' => 'getEan',
        'name' => 'getName',
        'type' => 'getType',
        'variant' => 'getVariant',
        'description' => 'getDescription',
        'producer' => 'getProducer',
        'categories' => 'getCategories',
        'totalPrice' => 'getTotalPrice',
        'totalVat' => 'getTotalVat',
        'productUrl' => 'getProductUrl',
        'unitPrice' => 'getUnitPrice',
        'unitVat' => 'getUnitVat',
        'quantity' => 'getQuantity',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['ean'] = $data['ean'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['variant'] = $data['variant'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['producer'] = $data['producer'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['totalPrice'] = $data['totalPrice'] ?? null;
        $this->container['totalVat'] = $data['totalVat'] ?? null;
        $this->container['productUrl'] = $data['productUrl'] ?? null;
        $this->container['unitPrice'] = $data['unitPrice'] ?? null;
        $this->container['unitVat'] = $data['unitVat'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 200)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 64)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['variant']) && (mb_strlen($this->container['variant']) > 250)) {
            $invalidProperties[] = "invalid value for 'variant', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['producer']) && (mb_strlen($this->container['producer']) > 250)) {
            $invalidProperties[] = "invalid value for 'producer', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['productUrl']) && (mb_strlen($this->container['productUrl']) > 200)) {
            $invalidProperties[] = "invalid value for 'productUrl', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Internal code for item (internal to e-shop). Used to better identify the item for future changes
     *
     * @return self
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $code when calling PrecheckOrderItemRequest., must be smaller than or equal to 200.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean EAN code
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (!is_null($ean) && (mb_strlen($ean) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling PrecheckOrderItemRequest., must be smaller than or equal to 64.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Item name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PrecheckOrderItemRequest., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SkipPay\Model\ItemType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SkipPay\Model\ItemType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string|null
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string|null $variant Item variant
     *
     * @return self
     */
    public function setVariant($variant)
    {
        if (!is_null($variant) && (mb_strlen($variant) > 250)) {
            throw new \InvalidArgumentException('invalid length for $variant when calling PrecheckOrderItemRequest., must be smaller than or equal to 250.');
        }

        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets producer
     *
     * @return string|null
     */
    public function getProducer()
    {
        return $this->container['producer'];
    }

    /**
     * Sets producer
     *
     * @param string|null $producer Producer name
     *
     * @return self
     */
    public function setProducer($producer)
    {
        if (!is_null($producer) && (mb_strlen($producer) > 250)) {
            throw new \InvalidArgumentException('invalid length for $producer when calling PrecheckOrderItemRequest., must be smaller than or equal to 250.');
        }

        $this->container['producer'] = $producer;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories List of item categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return \SkipPay\Model\Amount|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param \SkipPay\Model\Amount|null $totalPrice totalPrice
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }

    /**
     * Gets totalVat
     *
     * @return \SkipPay\Model\VatAmount|null
     */
    public function getTotalVat()
    {
        return $this->container['totalVat'];
    }

    /**
     * Sets totalVat
     *
     * @param \SkipPay\Model\VatAmount|null $totalVat totalVat
     *
     * @return self
     */
    public function setTotalVat($totalVat)
    {
        $this->container['totalVat'] = $totalVat;

        return $this;
    }

    /**
     * Gets productUrl
     *
     * @return string|null
     */
    public function getProductUrl()
    {
        return $this->container['productUrl'];
    }

    /**
     * Sets productUrl
     *
     * @param string|null $productUrl URL of the item in e-shop
     *
     * @return self
     */
    public function setProductUrl($productUrl)
    {
        if (!is_null($productUrl) && (mb_strlen($productUrl) > 200)) {
            throw new \InvalidArgumentException('invalid length for $productUrl when calling PrecheckOrderItemRequest., must be smaller than or equal to 200.');
        }

        $this->container['productUrl'] = $productUrl;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return \SkipPay\Model\Amount|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param \SkipPay\Model\Amount|null $unitPrice unitPrice
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets unitVat
     *
     * @return \SkipPay\Model\VatAmount|null
     */
    public function getUnitVat()
    {
        return $this->container['unitVat'];
    }

    /**
     * Sets unitVat
     *
     * @param \SkipPay\Model\VatAmount|null $unitVat unitVat
     *
     * @return self
     */
    public function setUnitVat($unitVat)
    {
        $this->container['unitVat'] = $unitVat;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity (positive float/decimal up to 3 decimal places) Item quantity. If empty, considered as 1.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
