<?php

/**
 * OrderItemsSendRequestAllOf
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * OrderItemsSendRequestAllOf Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class OrderItemsSendRequestAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItemsSendRequest_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'document' => '\SkipPay\Model\DocumentRequest',
        'variableSymbol' => 'string',
        'specificSymbol' => 'string',
        'sentDate' => '\DateTime',
        'deliveryCarrier' => '\SkipPay\Model\DeliveryCarrier',
        'deliveryTrackingNumber' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document' => null,
        'variableSymbol' => null,
        'specificSymbol' => null,
        'sentDate' => 'date',
        'deliveryCarrier' => null,
        'deliveryTrackingNumber' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document' => 'document',
        'variableSymbol' => 'variableSymbol',
        'specificSymbol' => 'specificSymbol',
        'sentDate' => 'sentDate',
        'deliveryCarrier' => 'deliveryCarrier',
        'deliveryTrackingNumber' => 'deliveryTrackingNumber',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document' => 'setDocument',
        'variableSymbol' => 'setVariableSymbol',
        'specificSymbol' => 'setSpecificSymbol',
        'sentDate' => 'setSentDate',
        'deliveryCarrier' => 'setDeliveryCarrier',
        'deliveryTrackingNumber' => 'setDeliveryTrackingNumber',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document' => 'getDocument',
        'variableSymbol' => 'getVariableSymbol',
        'specificSymbol' => 'getSpecificSymbol',
        'sentDate' => 'getSentDate',
        'deliveryCarrier' => 'getDeliveryCarrier',
        'deliveryTrackingNumber' => 'getDeliveryTrackingNumber',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document'] = $data['document'] ?? null;
        $this->container['variableSymbol'] = $data['variableSymbol'] ?? null;
        $this->container['specificSymbol'] = $data['specificSymbol'] ?? null;
        $this->container['sentDate'] = $data['sentDate'] ?? null;
        $this->container['deliveryCarrier'] = $data['deliveryCarrier'] ?? null;
        $this->container['deliveryTrackingNumber'] = $data['deliveryTrackingNumber'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['variableSymbol']) && (mb_strlen($this->container['variableSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'variableSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['specificSymbol']) && (mb_strlen($this->container['specificSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'specificSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['deliveryTrackingNumber']) && (mb_strlen($this->container['deliveryTrackingNumber']) > 64)) {
            $invalidProperties[] = "invalid value for 'deliveryTrackingNumber', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets document
     *
     * @return \SkipPay\Model\DocumentRequest|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \SkipPay\Model\DocumentRequest|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets variableSymbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variableSymbol'];
    }

    /**
     * Sets variableSymbol
     *
     * @param string|null $variableSymbol Required if was not specified earlier in ''Create application'' or ''Change application order'' operations. Symbol used for making the payment to your account. This string must contain only numbers, maximum length is 10 characters (digits).
     *
     * @return self
     */
    public function setVariableSymbol($variableSymbol)
    {
        if (!is_null($variableSymbol) && (mb_strlen($variableSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $variableSymbol when calling OrderItemsSendRequestAllOf., must be smaller than or equal to 10.');
        }

        $this->container['variableSymbol'] = $variableSymbol;

        return $this;
    }

    /**
     * Gets specificSymbol
     *
     * @return string|null
     */
    public function getSpecificSymbol()
    {
        return $this->container['specificSymbol'];
    }

    /**
     * Sets specificSymbol
     *
     * @param string|null $specificSymbol Symbol used for making the payment to your account. This string must contain only numbers, maximum length is 10 characters (digits).
     *
     * @return self
     */
    public function setSpecificSymbol($specificSymbol)
    {
        if (!is_null($specificSymbol) && (mb_strlen($specificSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $specificSymbol when calling OrderItemsSendRequestAllOf., must be smaller than or equal to 10.');
        }

        $this->container['specificSymbol'] = $specificSymbol;

        return $this;
    }

    /**
     * Gets sentDate
     *
     * @return \DateTime|null
     */
    public function getSentDate()
    {
        return $this->container['sentDate'];
    }

    /**
     * Sets sentDate
     *
     * @param \DateTime|null $sentDate Shipping date
     *
     * @return self
     */
    public function setSentDate($sentDate)
    {
        $this->container['sentDate'] = $sentDate;

        return $this;
    }

    /**
     * Gets deliveryCarrier
     *
     * @return \SkipPay\Model\DeliveryCarrier|null
     */
    public function getDeliveryCarrier()
    {
        return $this->container['deliveryCarrier'];
    }

    /**
     * Sets deliveryCarrier
     *
     * @param \SkipPay\Model\DeliveryCarrier|null $deliveryCarrier deliveryCarrier
     *
     * @return self
     */
    public function setDeliveryCarrier($deliveryCarrier)
    {
        $this->container['deliveryCarrier'] = $deliveryCarrier;

        return $this;
    }

    /**
     * Gets deliveryTrackingNumber
     *
     * @return string|null
     */
    public function getDeliveryTrackingNumber()
    {
        return $this->container['deliveryTrackingNumber'];
    }

    /**
     * Sets deliveryTrackingNumber
     *
     * @param string|null $deliveryTrackingNumber Delivery tracking number
     *
     * @return self
     */
    public function setDeliveryTrackingNumber($deliveryTrackingNumber)
    {
        if (!is_null($deliveryTrackingNumber) && (mb_strlen($deliveryTrackingNumber) > 64)) {
            throw new \InvalidArgumentException('invalid length for $deliveryTrackingNumber when calling OrderItemsSendRequestAllOf., must be smaller than or equal to 64.');
        }

        $this->container['deliveryTrackingNumber'] = $deliveryTrackingNumber;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
