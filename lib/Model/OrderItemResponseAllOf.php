<?php

/**
 * OrderItemResponseAllOf
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * OrderItemResponseAllOf Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class OrderItemResponseAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItemResponse_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'state' => '\SkipPay\Model\OrderDeliveryState',
        'sentDate' => '\DateTime',
        'deliveryDate' => '\DateTime',
        'deliveryTrackingNumber' => 'string',
        'image' => '\SkipPay\Model\FileResponse',
        'unitPrice' => '\SkipPay\Model\Amount',
        'unitVat' => '\SkipPay\Model\VatAmount',
        'quantity' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'state' => null,
        'sentDate' => 'date',
        'deliveryDate' => 'date',
        'deliveryTrackingNumber' => null,
        'image' => null,
        'unitPrice' => null,
        'unitVat' => null,
        'quantity' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'sentDate' => 'sentDate',
        'deliveryDate' => 'deliveryDate',
        'deliveryTrackingNumber' => 'deliveryTrackingNumber',
        'image' => 'image',
        'unitPrice' => 'unitPrice',
        'unitVat' => 'unitVat',
        'quantity' => 'quantity',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'sentDate' => 'setSentDate',
        'deliveryDate' => 'setDeliveryDate',
        'deliveryTrackingNumber' => 'setDeliveryTrackingNumber',
        'image' => 'setImage',
        'unitPrice' => 'setUnitPrice',
        'unitVat' => 'setUnitVat',
        'quantity' => 'setQuantity',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'sentDate' => 'getSentDate',
        'deliveryDate' => 'getDeliveryDate',
        'deliveryTrackingNumber' => 'getDeliveryTrackingNumber',
        'image' => 'getImage',
        'unitPrice' => 'getUnitPrice',
        'unitVat' => 'getUnitVat',
        'quantity' => 'getQuantity',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = $data['state'] ?? null;
        $this->container['sentDate'] = $data['sentDate'] ?? null;
        $this->container['deliveryDate'] = $data['deliveryDate'] ?? null;
        $this->container['deliveryTrackingNumber'] = $data['deliveryTrackingNumber'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['unitPrice'] = $data['unitPrice'] ?? null;
        $this->container['unitVat'] = $data['unitVat'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['state'] === null) {
            $invalidProperties['state'] = "'state' can't be null";
        }
        if ($this->container['sentDate'] === null) {
            $invalidProperties['sentDate'] = "'sentDate' can't be null";
        }
        if ($this->container['deliveryDate'] === null) {
            $invalidProperties['deliveryDate'] = "'deliveryDate' can't be null";
        }
        if ($this->container['deliveryTrackingNumber'] === null) {
            $invalidProperties['deliveryTrackingNumber'] = "'deliveryTrackingNumber' can't be null";
        }
        if ((mb_strlen($this->container['deliveryTrackingNumber']) > 64)) {
            $invalidProperties[] = "invalid value for 'deliveryTrackingNumber', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['unitPrice'] === null) {
            $invalidProperties['unitPrice'] = "'unitPrice' can't be null";
        }
        if ($this->container['unitVat'] === null) {
            $invalidProperties['unitVat'] = "'unitVat' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties['quantity'] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 1)) {
            $invalidProperties['quantity'] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets state
     *
     * @return \SkipPay\Model\OrderDeliveryState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SkipPay\Model\OrderDeliveryState $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets sentDate
     *
     * @return \DateTime
     */
    public function getSentDate()
    {
        return $this->container['sentDate'];
    }

    /**
     * Sets sentDate
     *
     * @param \DateTime $sentDate Date when item was sent. Only when the whole order was NOT sent at once.
     *
     * @return self
     */
    public function setSentDate($sentDate)
    {
        $this->container['sentDate'] = $sentDate;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime $deliveryDate Date when item was delivered. Only when the whole order was NOT sent at once.
     *
     * @return self
     */
    public function setDeliveryDate($deliveryDate)
    {
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets deliveryTrackingNumber
     *
     * @return string
     */
    public function getDeliveryTrackingNumber()
    {
        return $this->container['deliveryTrackingNumber'];
    }

    /**
     * Sets deliveryTrackingNumber
     *
     * @param string $deliveryTrackingNumber Tracking number for the item. Only when the whole order was NOT sent at once.
     *
     * @return self
     */
    public function setDeliveryTrackingNumber($deliveryTrackingNumber)
    {
        if ((mb_strlen($deliveryTrackingNumber) > 64)) {
            throw new \InvalidArgumentException('invalid length for $deliveryTrackingNumber when calling OrderItemResponseAllOf., must be smaller than or equal to 64.');
        }

        $this->container['deliveryTrackingNumber'] = $deliveryTrackingNumber;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \SkipPay\Model\FileResponse|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \SkipPay\Model\FileResponse|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return \SkipPay\Model\Amount
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param \SkipPay\Model\Amount $unitPrice unitPrice
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets unitVat
     *
     * @return \SkipPay\Model\VatAmount
     */
    public function getUnitVat()
    {
        return $this->container['unitVat'];
    }

    /**
     * Sets unitVat
     *
     * @param \SkipPay\Model\VatAmount $unitVat unitVat
     *
     * @return self
     */
    public function setUnitVat($unitVat)
    {
        $this->container['unitVat'] = $unitVat;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity (positive float/decimal up to 3 decimal places) Item quantity.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderItemResponseAllOf., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
