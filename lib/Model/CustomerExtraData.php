<?php

/**
 * CustomerExtraData
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * CustomerExtraData Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class CustomerExtraData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerExtraData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'transactionsNumber' => 'float',
        'cashlessTransactionsNumber' => 'float',
        'transactionsSum' => '\SkipPay\Model\Amount',
        'cashlessTransactionsSum' => '\SkipPay\Model\Amount',
        'latestTransactionDate' => '\DateTime',
        'earliestTransactionDate' => '\DateTime',
        'pageTotalTime' => 'float',
        'pageReviewsTime' => 'float',
        'cartItemsRemoved' => 'float',
        'itemsViewed' => 'float',
        'tags' => 'string[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transactionsNumber' => null,
        'cashlessTransactionsNumber' => null,
        'transactionsSum' => null,
        'cashlessTransactionsSum' => null,
        'latestTransactionDate' => 'date',
        'earliestTransactionDate' => 'date',
        'pageTotalTime' => null,
        'pageReviewsTime' => null,
        'cartItemsRemoved' => null,
        'itemsViewed' => null,
        'tags' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionsNumber' => 'transactionsNumber',
        'cashlessTransactionsNumber' => 'cashlessTransactionsNumber',
        'transactionsSum' => 'transactionsSum',
        'cashlessTransactionsSum' => 'cashlessTransactionsSum',
        'latestTransactionDate' => 'latestTransactionDate',
        'earliestTransactionDate' => 'earliestTransactionDate',
        'pageTotalTime' => 'pageTotalTime',
        'pageReviewsTime' => 'pageReviewsTime',
        'cartItemsRemoved' => 'cartItemsRemoved',
        'itemsViewed' => 'itemsViewed',
        'tags' => 'tags',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionsNumber' => 'setTransactionsNumber',
        'cashlessTransactionsNumber' => 'setCashlessTransactionsNumber',
        'transactionsSum' => 'setTransactionsSum',
        'cashlessTransactionsSum' => 'setCashlessTransactionsSum',
        'latestTransactionDate' => 'setLatestTransactionDate',
        'earliestTransactionDate' => 'setEarliestTransactionDate',
        'pageTotalTime' => 'setPageTotalTime',
        'pageReviewsTime' => 'setPageReviewsTime',
        'cartItemsRemoved' => 'setCartItemsRemoved',
        'itemsViewed' => 'setItemsViewed',
        'tags' => 'setTags',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionsNumber' => 'getTransactionsNumber',
        'cashlessTransactionsNumber' => 'getCashlessTransactionsNumber',
        'transactionsSum' => 'getTransactionsSum',
        'cashlessTransactionsSum' => 'getCashlessTransactionsSum',
        'latestTransactionDate' => 'getLatestTransactionDate',
        'earliestTransactionDate' => 'getEarliestTransactionDate',
        'pageTotalTime' => 'getPageTotalTime',
        'pageReviewsTime' => 'getPageReviewsTime',
        'cartItemsRemoved' => 'getCartItemsRemoved',
        'itemsViewed' => 'getItemsViewed',
        'tags' => 'getTags',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionsNumber'] = $data['transactionsNumber'] ?? null;
        $this->container['cashlessTransactionsNumber'] = $data['cashlessTransactionsNumber'] ?? null;
        $this->container['transactionsSum'] = $data['transactionsSum'] ?? null;
        $this->container['cashlessTransactionsSum'] = $data['cashlessTransactionsSum'] ?? null;
        $this->container['latestTransactionDate'] = $data['latestTransactionDate'] ?? null;
        $this->container['earliestTransactionDate'] = $data['earliestTransactionDate'] ?? null;
        $this->container['pageTotalTime'] = $data['pageTotalTime'] ?? null;
        $this->container['pageReviewsTime'] = $data['pageReviewsTime'] ?? null;
        $this->container['cartItemsRemoved'] = $data['cartItemsRemoved'] ?? null;
        $this->container['itemsViewed'] = $data['itemsViewed'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transactionsNumber']) && ($this->container['transactionsNumber'] < 1)) {
            $invalidProperties['transactionsNumber'] = "invalid value for 'transactionsNumber', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cashlessTransactionsNumber']) && ($this->container['cashlessTransactionsNumber'] < 1)) {
            $invalidProperties['cashlessTransactionsNumber'] = "invalid value for 'cashlessTransactionsNumber', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pageTotalTime']) && ($this->container['pageTotalTime'] < 1)) {
            $invalidProperties['pageTotalTime'] = "invalid value for 'pageTotalTime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pageReviewsTime']) && ($this->container['pageReviewsTime'] < 1)) {
            $invalidProperties['pageReviewsTime'] = "invalid value for 'pageReviewsTime', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cartItemsRemoved']) && ($this->container['cartItemsRemoved'] < 1)) {
            $invalidProperties['cartItemsRemoved'] = "invalid value for 'cartItemsRemoved', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['itemsViewed']) && ($this->container['itemsViewed'] < 1)) {
            $invalidProperties['itemsViewed'] = "invalid value for 'itemsViewed', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets transactionsNumber
     *
     * @return float|null
     */
    public function getTransactionsNumber()
    {
        return $this->container['transactionsNumber'];
    }

    /**
     * Sets transactionsNumber
     *
     * @param float|null $transactionsNumber Historical count of customer's cash transactions made in partner's e-shop
     *
     * @return self
     */
    public function setTransactionsNumber($transactionsNumber)
    {

        if (!is_null($transactionsNumber) && ($transactionsNumber < 1)) {
            throw new \InvalidArgumentException('invalid value for $transactionsNumber when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['transactionsNumber'] = $transactionsNumber;

        return $this;
    }

    /**
     * Gets cashlessTransactionsNumber
     *
     * @return float|null
     */
    public function getCashlessTransactionsNumber()
    {
        return $this->container['cashlessTransactionsNumber'];
    }

    /**
     * Sets cashlessTransactionsNumber
     *
     * @param float|null $cashlessTransactionsNumber Historical count of customer's cashless transactions made in partner's e-shop
     *
     * @return self
     */
    public function setCashlessTransactionsNumber($cashlessTransactionsNumber)
    {

        if (!is_null($cashlessTransactionsNumber) && ($cashlessTransactionsNumber < 1)) {
            throw new \InvalidArgumentException('invalid value for $cashlessTransactionsNumber when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['cashlessTransactionsNumber'] = $cashlessTransactionsNumber;

        return $this;
    }

    /**
     * Gets transactionsSum
     *
     * @return \SkipPay\Model\Amount|null
     */
    public function getTransactionsSum()
    {
        return $this->container['transactionsSum'];
    }

    /**
     * Sets transactionsSum
     *
     * @param \SkipPay\Model\Amount|null $transactionsSum transactionsSum
     *
     * @return self
     */
    public function setTransactionsSum($transactionsSum)
    {
        $this->container['transactionsSum'] = $transactionsSum;

        return $this;
    }

    /**
     * Gets cashlessTransactionsSum
     *
     * @return \SkipPay\Model\Amount|null
     */
    public function getCashlessTransactionsSum()
    {
        return $this->container['cashlessTransactionsSum'];
    }

    /**
     * Sets cashlessTransactionsSum
     *
     * @param \SkipPay\Model\Amount|null $cashlessTransactionsSum cashlessTransactionsSum
     *
     * @return self
     */
    public function setCashlessTransactionsSum($cashlessTransactionsSum)
    {
        $this->container['cashlessTransactionsSum'] = $cashlessTransactionsSum;

        return $this;
    }

    /**
     * Gets latestTransactionDate
     *
     * @return \DateTime|null
     */
    public function getLatestTransactionDate()
    {
        return $this->container['latestTransactionDate'];
    }

    /**
     * Sets latestTransactionDate
     *
     * @param \DateTime|null $latestTransactionDate Newest transaction date on partner e-shop.
     *
     * @return self
     */
    public function setLatestTransactionDate($latestTransactionDate)
    {
        $this->container['latestTransactionDate'] = $latestTransactionDate;

        return $this;
    }

    /**
     * Gets earliestTransactionDate
     *
     * @return \DateTime|null
     */
    public function getEarliestTransactionDate()
    {
        return $this->container['earliestTransactionDate'];
    }

    /**
     * Sets earliestTransactionDate
     *
     * @param \DateTime|null $earliestTransactionDate Oldest transaction date on partner e-shop
     *
     * @return self
     */
    public function setEarliestTransactionDate($earliestTransactionDate)
    {
        $this->container['earliestTransactionDate'] = $earliestTransactionDate;

        return $this;
    }

    /**
     * Gets pageTotalTime
     *
     * @return float|null
     */
    public function getPageTotalTime()
    {
        return $this->container['pageTotalTime'];
    }

    /**
     * Sets pageTotalTime
     *
     * @param float|null $pageTotalTime Total time spent on partners website (in seconds)
     *
     * @return self
     */
    public function setPageTotalTime($pageTotalTime)
    {

        if (!is_null($pageTotalTime) && ($pageTotalTime < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageTotalTime when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['pageTotalTime'] = $pageTotalTime;

        return $this;
    }

    /**
     * Gets pageReviewsTime
     *
     * @return float|null
     */
    public function getPageReviewsTime()
    {
        return $this->container['pageReviewsTime'];
    }

    /**
     * Sets pageReviewsTime
     *
     * @param float|null $pageReviewsTime Total time spent on partners website in review and comments sections (in seconds)
     *
     * @return self
     */
    public function setPageReviewsTime($pageReviewsTime)
    {

        if (!is_null($pageReviewsTime) && ($pageReviewsTime < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageReviewsTime when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['pageReviewsTime'] = $pageReviewsTime;

        return $this;
    }

    /**
     * Gets cartItemsRemoved
     *
     * @return float|null
     */
    public function getCartItemsRemoved()
    {
        return $this->container['cartItemsRemoved'];
    }

    /**
     * Sets cartItemsRemoved
     *
     * @param float|null $cartItemsRemoved Total count of removed items form shopping basket during current shopping
     *
     * @return self
     */
    public function setCartItemsRemoved($cartItemsRemoved)
    {

        if (!is_null($cartItemsRemoved) && ($cartItemsRemoved < 1)) {
            throw new \InvalidArgumentException('invalid value for $cartItemsRemoved when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['cartItemsRemoved'] = $cartItemsRemoved;

        return $this;
    }

    /**
     * Gets itemsViewed
     *
     * @return float|null
     */
    public function getItemsViewed()
    {
        return $this->container['itemsViewed'];
    }

    /**
     * Sets itemsViewed
     *
     * @param float|null $itemsViewed Number of viewed pages with products
     *
     * @return self
     */
    public function setItemsViewed($itemsViewed)
    {

        if (!is_null($itemsViewed) && ($itemsViewed < 1)) {
            throw new \InvalidArgumentException('invalid value for $itemsViewed when calling CustomerExtraData., must be bigger than or equal to 1.');
        }

        $this->container['itemsViewed'] = $itemsViewed;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags List of custom tags (ie. information, that customer is club member, vip customer, etc.)
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
