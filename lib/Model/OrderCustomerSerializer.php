<?php

/**
 * OrderCustomerSerializer
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * OrderCustomerSerializer Class Doc Comment
 *
 * @category Class
 * @description Customer data
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class OrderCustomerSerializer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderCustomerSerializer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'titleBefore' => 'string',
        'titleAfter' => 'string',
        'email' => 'string',
        'addresses' => '\SkipPay\Model\PrecheckAddress[]',
        'tin' => 'string',
        'vatin' => 'string',
        'extraData' => '\SkipPay\Model\CustomerExtraData',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'titleBefore' => null,
        'titleAfter' => null,
        'email' => null,
        'addresses' => null,
        'tin' => null,
        'vatin' => null,
        'extraData' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'titleBefore' => 'titleBefore',
        'titleAfter' => 'titleAfter',
        'email' => 'email',
        'addresses' => 'addresses',
        'tin' => 'tin',
        'vatin' => 'vatin',
        'extraData' => 'extraData',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'titleBefore' => 'setTitleBefore',
        'titleAfter' => 'setTitleAfter',
        'email' => 'setEmail',
        'addresses' => 'setAddresses',
        'tin' => 'setTin',
        'vatin' => 'setVatin',
        'extraData' => 'setExtraData',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'titleBefore' => 'getTitleBefore',
        'titleAfter' => 'getTitleAfter',
        'email' => 'getEmail',
        'addresses' => 'getAddresses',
        'tin' => 'getTin',
        'vatin' => 'getVatin',
        'extraData' => 'getExtraData',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['titleBefore'] = $data['titleBefore'] ?? null;
        $this->container['titleAfter'] = $data['titleAfter'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['tin'] = $data['tin'] ?? null;
        $this->container['vatin'] = $data['vatin'] ?? null;
        $this->container['extraData'] = $data['extraData'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['titleBefore']) && (mb_strlen($this->container['titleBefore']) > 60)) {
            $invalidProperties[] = "invalid value for 'titleBefore', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['titleAfter']) && (mb_strlen($this->container['titleAfter']) > 60)) {
            $invalidProperties[] = "invalid value for 'titleAfter', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties['email'] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['tin']) && (mb_strlen($this->container['tin']) > 20)) {
            $invalidProperties[] = "invalid value for 'tin', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['vatin']) && (mb_strlen($this->container['vatin']) > 20)) {
            $invalidProperties[] = "invalid value for 'vatin', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets titleBefore
     *
     * @return string|null
     */
    public function getTitleBefore()
    {
        return $this->container['titleBefore'];
    }

    /**
     * Sets titleBefore
     *
     * @param string|null $titleBefore Academical degree, in front of the name.
     *
     * @return self
     */
    public function setTitleBefore($titleBefore)
    {
        if (!is_null($titleBefore) && (mb_strlen($titleBefore) > 60)) {
            throw new \InvalidArgumentException('invalid length for $titleBefore when calling OrderCustomerSerializer., must be smaller than or equal to 60.');
        }

        $this->container['titleBefore'] = $titleBefore;

        return $this;
    }

    /**
     * Gets titleAfter
     *
     * @return string|null
     */
    public function getTitleAfter()
    {
        return $this->container['titleAfter'];
    }

    /**
     * Sets titleAfter
     *
     * @param string|null $titleAfter Academical degree, behind name.
     *
     * @return self
     */
    public function setTitleAfter($titleAfter)
    {
        if (!is_null($titleAfter) && (mb_strlen($titleAfter) > 60)) {
            throw new \InvalidArgumentException('invalid length for $titleAfter when calling OrderCustomerSerializer., must be smaller than or equal to 60.');
        }

        $this->container['titleAfter'] = $titleAfter;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email E-mail address of customer
     *
     * @return self
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderCustomerSerializer., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \SkipPay\Model\PrecheckAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \SkipPay\Model\PrecheckAddress[]|null $addresses Addresses. All types are allowed.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string|null
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string|null $tin Tax identification number (ICO)
     *
     * @return self
     */
    public function setTin($tin)
    {
        if (!is_null($tin) && (mb_strlen($tin) > 20)) {
            throw new \InvalidArgumentException('invalid length for $tin when calling OrderCustomerSerializer., must be smaller than or equal to 20.');
        }

        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets vatin
     *
     * @return string|null
     */
    public function getVatin()
    {
        return $this->container['vatin'];
    }

    /**
     * Sets vatin
     *
     * @param string|null $vatin VAT identification number
     *
     * @return self
     */
    public function setVatin($vatin)
    {
        if (!is_null($vatin) && (mb_strlen($vatin) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vatin when calling OrderCustomerSerializer., must be smaller than or equal to 20.');
        }

        $this->container['vatin'] = $vatin;

        return $this;
    }

    /**
     * Gets extraData
     *
     * @return \SkipPay\Model\CustomerExtraData|null
     */
    public function getExtraData()
    {
        return $this->container['extraData'];
    }

    /**
     * Sets extraData
     *
     * @param \SkipPay\Model\CustomerExtraData|null $extraData extraData
     *
     * @return self
     */
    public function setExtraData($extraData)
    {
        $this->container['extraData'] = $extraData;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
