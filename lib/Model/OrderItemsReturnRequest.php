<?php

/**
 * OrderItemsReturnRequest
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * OrderItemsReturnRequest Class Doc Comment
 *
 * @category Class
 * @description Object used to mark order items as returned.
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class OrderItemsReturnRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItemsReturnRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'items' => '\SkipPay\Model\ChangeOrderItemRequestSerializer[]',
        'totalPrice' => '\SkipPay\Model\OrderItemsChangeRequestTotalPrice',
        'totalVat' => '\SkipPay\Model\VatAmount[]',
        'document' => '\SkipPay\Model\DocumentRequest',
        'variableSymbol' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'items' => null,
        'totalPrice' => null,
        'totalVat' => null,
        'document' => null,
        'variableSymbol' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'items' => 'items',
        'totalPrice' => 'totalPrice',
        'totalVat' => 'totalVat',
        'document' => 'document',
        'variableSymbol' => 'variableSymbol',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'items' => 'setItems',
        'totalPrice' => 'setTotalPrice',
        'totalVat' => 'setTotalVat',
        'document' => 'setDocument',
        'variableSymbol' => 'setVariableSymbol',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'items' => 'getItems',
        'totalPrice' => 'getTotalPrice',
        'totalVat' => 'getTotalVat',
        'document' => 'getDocument',
        'variableSymbol' => 'getVariableSymbol',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['items'] = $data['items'] ?? null;
        $this->container['totalPrice'] = $data['totalPrice'] ?? null;
        $this->container['totalVat'] = $data['totalVat'] ?? null;
        $this->container['document'] = $data['document'] ?? null;
        $this->container['variableSymbol'] = $data['variableSymbol'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['variableSymbol']) && (mb_strlen($this->container['variableSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'variableSymbol', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets items
     *
     * @return \SkipPay\Model\ChangeOrderItemRequestSerializer[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \SkipPay\Model\ChangeOrderItemRequestSerializer[]|null $items List of changed items. All items are considered when empty.
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return \SkipPay\Model\OrderItemsChangeRequestTotalPrice|null
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param \SkipPay\Model\OrderItemsChangeRequestTotalPrice|null $totalPrice totalPrice
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }

    /**
     * Gets totalVat
     *
     * @return \SkipPay\Model\VatAmount[]|null
     */
    public function getTotalVat()
    {
        return $this->container['totalVat'];
    }

    /**
     * Sets totalVat
     *
     * @param \SkipPay\Model\VatAmount[]|null $totalVat Total VAT amounts of items (from orderItems array) split by their VAT rates.
     *
     * @return self
     */
    public function setTotalVat($totalVat)
    {
        $this->container['totalVat'] = $totalVat;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \SkipPay\Model\DocumentRequest|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \SkipPay\Model\DocumentRequest|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets variableSymbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variableSymbol'];
    }

    /**
     * Sets variableSymbol
     *
     * @param string|null $variableSymbol Variable symbol of the new document (credit note, ...). This symbols is used by Skip Pay to pair payment from e-shop.
     *
     * @return self
     */
    public function setVariableSymbol($variableSymbol)
    {
        if (!is_null($variableSymbol) && (mb_strlen($variableSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $variableSymbol when calling OrderItemsReturnRequest., must be smaller than or equal to 10.');
        }

        $this->container['variableSymbol'] = $variableSymbol;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
