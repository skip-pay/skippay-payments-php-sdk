<?php

/**
 * PrecheckAddress
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay\Model;

use ArrayAccess;
use SkipPay\ObjectSerializer;

/**
 * PrecheckAddress Class Doc Comment
 *
 * @category Class
 * @description Address information for precheck validation
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<?string, ?mixed>
 */
class PrecheckAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrecheckAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|class-string>
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'country' => 'string',
        'city' => 'string',
        'streetAddress' => 'string',
        'streetNumber' => 'string',
        'zip' => 'string',
        'addressType' => '\SkipPay\Model\AddressType',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'country' => null,
        'city' => null,
        'streetAddress' => null,
        'streetNumber' => null,
        'zip' => null,
        'addressType' => null,
    ];

    /**
      * Array of additional properties.
      *
      * @var array<array-key, array-key>
      */
    protected $additionalProperties = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'country' => 'country',
        'city' => 'city',
        'streetAddress' => 'streetAddress',
        'streetNumber' => 'streetNumber',
        'zip' => 'zip',
        'addressType' => 'addressType',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'country' => 'setCountry',
        'city' => 'setCity',
        'streetAddress' => 'setStreetAddress',
        'streetNumber' => 'setStreetNumber',
        'zip' => 'setZip',
        'addressType' => 'setAddressType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'country' => 'getCountry',
        'city' => 'getCity',
        'streetAddress' => 'getStreetAddress',
        'streetNumber' => 'getStreetNumber',
        'zip' => 'getZip',
        'addressType' => 'getAddressType',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['streetAddress'] = $data['streetAddress'] ?? null;
        $this->container['streetNumber'] = $data['streetNumber'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['addressType'] = $data['addressType'] ?? null;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * {@inheritDoc}
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * {@inheritdoc}
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * {@inheritdoc}
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * {@inheritdoc}
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * {@inheritdoc}
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 100)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['streetAddress']) && (mb_strlen($this->container['streetAddress']) > 100)) {
            $invalidProperties[] = "invalid value for 'streetAddress', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['streetNumber']) && (mb_strlen($this->container['streetNumber']) > 50)) {
            $invalidProperties[] = "invalid value for 'streetNumber', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 30)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * {@inheritdoc}
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name on address
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country. (see [ISO 3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PrecheckAddress., must be smaller than or equal to 100.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets streetAddress
     *
     * @return string|null
     */
    public function getStreetAddress()
    {
        return $this->container['streetAddress'];
    }

    /**
     * Sets streetAddress
     *
     * @param string|null $streetAddress Street/city part
     *
     * @return self
     */
    public function setStreetAddress($streetAddress)
    {
        if (!is_null($streetAddress) && (mb_strlen($streetAddress) > 100)) {
            throw new \InvalidArgumentException('invalid length for $streetAddress when calling PrecheckAddress., must be smaller than or equal to 100.');
        }

        $this->container['streetAddress'] = $streetAddress;

        return $this;
    }

    /**
     * Gets streetNumber
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['streetNumber'];
    }

    /**
     * Sets streetNumber
     *
     * @param string|null $streetNumber Street number
     *
     * @return self
     */
    public function setStreetNumber($streetNumber)
    {
        if (!is_null($streetNumber) && (mb_strlen($streetNumber) > 50)) {
            throw new \InvalidArgumentException('invalid length for $streetNumber when calling PrecheckAddress., must be smaller than or equal to 50.');
        }

        $this->container['streetNumber'] = $streetNumber;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Postal code
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (mb_strlen($zip) > 30)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling PrecheckAddress., must be smaller than or equal to 30.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return \SkipPay\Model\AddressType|null
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param \SkipPay\Model\AddressType|null $addressType addressType
     *
     * @return self
     */
    public function setAddressType($addressType)
    {
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperties(array $fields)
    {
        $fields = array_diff_key($fields, static::$attributeMap);
        foreach ($this->additionalProperties as $additional_properties) {
            unset($this->container[$additional_properties]);
        }
        $this->container += $fields;
        $keys = array_keys($fields);
        $this->additionalProperties = array_combine($keys, $keys);
    }

    /**
     * {@inheritdoc}
     */
    public function setAdditionalProperty($property, $value)
    {
        if (isset(static::$attributeMap[$property])) {
            throw new \InvalidArgumentException();
        }
        $this->additionalProperties[$property] = $property;
        $this->container[$property] = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function getAdditionalProperties()
    {
        $container = $this->container;
        return array_map(function ($key) use ($container) {
            return $container[$key];
        }, $this->additionalProperties);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            throw new \RuntimeException('Appending to a model does not make sense. Provide an explicit property instead.');
        } else {
            if (!isset($this->attributeMap[$offset])) {
                $this->additionalProperties[$offset] = $offset;
            }
            $this->container[$offset] = $value;
        }
    }

    /**
     * {@inheritdoc}
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        /** @psalm-suppress PossiblyNullArrayOffset */
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }
}
