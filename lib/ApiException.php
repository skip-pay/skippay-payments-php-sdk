<?php

/**
 * ApiException
 *
 * Skip Pay API for partners
 *
 * API documentation for Skip Pay partners.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@skippay.cz
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0

 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkipPay;

use SkipPay\Model\ModelInterface;

/**
 * ApiException Class Doc Comment
 *
 * @category Class
 * @package  SkipPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApiException extends \Exception
{
    /**
     * The HTTP body of the server response as a string.
     *
     * @var string|null
     */
    protected $responseBody;

    /**
     * The HTTP header of the server response.
     *
     * @var string[][]
     */
    protected array $responseHeaders;

    /**
     * The deserialized response object.
     *
     * @var Model\ModelInterface|string|null
     */
    protected $responseObject = null;

    /**
     * Constructor
     *
     * @param string $message
     *   Error message.
     * @param int $code
     *   HTTP status code.
     * @param string[][] $responseHeaders
     *   HTTP response header.
     * @param string|null $responseBody
     *   HTTP decoded body of the server response either as a string.
     * @param \Throwable|null $previous
     *   The previous throwable used for the exception chaining.
     */
    public function __construct(string $message = "", int $code = 0, array $responseHeaders = [], $responseBody = null, $previous = null)
    {
        // TODO should this allow strings so it can accept weird MS codes like 404.1?
        parent::__construct($message, $code, $previous);
        $this->responseHeaders = $responseHeaders;
        $this->responseBody = $responseBody;
    }

    /**
     * Gets the HTTP response header.
     *
     * @return array<string, string[]>
     *   HTTP response header.
     */
    public function getResponseHeaders()
    {
        return $this->responseHeaders;
    }

    /**
     * Gets the HTTP body of the server response either as a string.
     *
     * @return string|null
     *   HTTP body of the server response either as \stdClass or string.
     */
    public function getResponseBody()
    {
        return $this->responseBody;
    }

    /**
     * Sets the deserialized response object (during deserialization).
     *
     * @param \SkipPay\Model\ModelInterface|string $obj
     *   Deserialized response object.
     *
     * @return void
     */
    public function setResponseObject($obj)
    {
        $this->responseObject = $obj;
    }

    /**
     * Gets the deserialized response object (during deserialization).
     *
     * @return \SkipPay\Model\ModelInterface|string|null
     *   The deserialized response object.
     */
    public function getResponseObject()
    {
        return $this->responseObject;
    }
}
